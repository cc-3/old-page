---
layout: post
title:  "Laboratorio 1"
date:   2017-01-27
category: lab
description: >
    El objetivo de este laboratorio es entrenar su intuición para trabajar con numeros en representación binaria y hexadecimal.
    Y tambien... jugar un poco...
permalink: /:categories/:title.html
---

#### Empezando

Antes de iniciar, hay unas recomendaciones que debemos darles. Si ustedes estan usando la maquina virtual de CCIII, tomen en cuenta que varios alumnos de otras 
secciones utilizan las mismas computadoras, asi que para evitar inconvenientes, <b>deben borrar todos los archivos en los que trabajaron y cerrar su cuenta de GitHub antes 
de salir del laboratorio</b>.

Regresando al tema, para este laboratorio, vamos a empezar a utilizar GitHub Classroom. GitHub Classroom nos permitira mantener un mejor control de sus repositorios. Para acceder a el, 
deben hacer click en este <a href="https://classroom.github.com/assignment-invitations/a6436788a1586af7547e3c2aae38eb66">link</a>. Luego de que acepten la invitación a Classroom, les saldrá
el siguiente mensaje:

[![GitHub Classroom](/assets/img/labs/lab1_classroom.png)](/assets/img/labs/lab1_classroom.png)

Una vez hayan aceptado, pueden proceder a clonar su repositorio:

```shell
~ $ git clone https://github.com/cc-3/lab01-su_usuario.git
```
Al clonar el repositorio, estan copiando todos los archivos que se encuentran en GitHub. Si para el final del laboratorio aun no han terminado, deben hacer un <b>commit</b> de su trabajo,
hacer <b>push</b> al repositorio y <b>borrarlo de la computadora</b>. Una vez en su casa, deben volver a ejecutar el comando <b>git clone</b> para seguir trabajando en donde se quedaron.

Como estamos trabajando en las computadoras del lab, pueden haber varios usuarios trabajando en la misma computadora y usando la misma configuración de Git, asi que deben configurar su email 
y su nombre localmente para este repositorio:

```shell
~ $ git config user.name "su_nombre"
~ $ git config user.email "su_correo"
```

Noten que si estan trabajando en su propia computadora, no es necesario hacer el paso anterior, de lo contrario, si lo es.


Una vez hayan hecho esto, estamos listos para iniciar.

***

#### Ejercicio 1: Alfabeto Binario

Para este ejercicio vamos a utilizar números en su representación binaria de 4-bits. Si tomamos una pila de 5 números binarios de 4 bits, podemos 
hacer patrones e imágenes. Para ayudarlos a visualizar esto, ustedes pueden pensar que los 0's  son blanco y los 1's son negro. Por ejemplo, el 
siguiente patrón de bits se mira así:

<table style="text-align: center;">
  <tr>
    <th>Número Binario</th>
    <th>Imagen</th>
  </tr>
  <tr>
    <td>0b0110</td>
    <th rowspan="5"><img style="padding-top:30px;" src="/assets/img/labs/lab1_fig1.png" alt="fig1"></th>
  </tr>
  <tr>
    <td>0b1001</td>
  </tr>
  <tr>
    <td>0b1111</td>
  </tr>
  <tr>
    <td>0b1001</td>
  </tr>
  <tr>
    <td>0b1001</td>
  </tr>
</table>

En este caso, tenemos 5 números en representación binaria, cada uno representando una fila, estos números tambien se pueden escribir en representación decimal y hexadecimal. 
Por ejemplo, el tercer valor de la letra <b>A</b> es 0b1111; este tambien se puede escribir en forma decimal: <b>15</b>, y en forma hexadecimal: <b>0xF</b>. Su trabajo sera 
traducir de una representación a otra los números que forman cada una de las 5 filas de las letras.

En los archivos descargados, ustedes tienen el archivo BinaryAlphabet.class y binary.txt, estos archivos les ayudaran a visualizar el patrón 
binario. En binary.txt, ustedes pueden escribir cinco lineas, cada una con cuatro 1's y 0's separados por espacio, que representan la 
letra que quieren dibujar. Luego de eso, pueden ver el patrón generado ejecutando:

```shell
~ $ java BinaryAlphabet binary.txt
```

**Responder**

En el archivo ejercicio1.py, deben cambiar los valores de las variables globales (eso es lo único que deben hacer)  para responder 
a las siguientes preguntas:

1. ¿Cuáles 5 números decimales producen el patrón de la letra "A" mostrada arriba? ¿Cuales 5 números hexadecimales?
2. ¿Qué letra se dibuja con 1, 1, 9, 9, 6? ¿Con 0xF8F88?
3. ¿Qué representación hexadecimal usarían para dibujar la letra S? ¿Qué representación hexadecimal usarían para dibujar la letra D?

Una vez hayan respondido las preguntas, pueden verificar su punteo ejecutando el siguiente comando:

```shell
~ $ make check-ej1
python check.py 1
Calificando Ejercicio: 1
....................
Nota: 40/40
```

Si todas las respuestas estan correctas en el ejercicio, entonces pueden subirl el ejercicio a GitHub:

```shell
~ $ git add ejercicio1.py
~ $ git commit -m "Ejericio 1 terminado"
~ $ git push origin master
```

***

#### Ejercicio 2: Cisco Binary Game

Hagan click [aquí](/assets/games/binary_game.swf) para encontrar el juego, pero si en algún caso tienen problemas con el juego, pueden probar
[este link](http://www.wordfreegames.com/game/binary-game.html). En caso de que ninguno de los liks funcione, intenten abrir la URL utilizando 
 <i>Google Chrome</i>. 

El objetivo es hacer coincidir el numero de la derecha con el representación binaria sin signo de la izquierda. Esto requiere una combinación de 
clicking y typing. Y hay presión de tiempo para hacer las cosas mas divertidas.

![figura2](/assets/img/labs/lab1_fig2.png)

El juego progresivamente se va volviendo mas rápido y más difícil. Vean si pueden alcanzar arriba de 20,000 puntos y llegar al nivel 5.

Logren arriba de 18,000 puntos, pausen el juego, tomen un screen shot y guardenlo en su directorio de trabajo con el nombre (**_ejercicio2.png_**).

Para revisar si esta todo en orden, verifiquen su nota con:

```shell
~ $ make check-ej2
python check.py 2
Calificando Ejercicio: 2
....................
Nota: 10/10

```

Si obtienen los 10 puntos, hagan un commit y subanlo a GitHub:

```shell
~ $ git add ejercicio2.py
~ $ git commit -m "Ejericio 2 terminado"
~ $ git push origin master
```

***

#### Ejercicio 3: 1,000 $1 Bills

Si les entregamos mil billetes de $1 y diez sobres. Su trabajo es encontrar una manera de poner una cantidad X de billetes de dólar en cada uno de 
los diez sobres, de modo que sin importar la cantidad que uno les pida (entre $1 y $1000), ustedes solo tienen que dar una combinación de esos 
sobres asegurándose de dar siempre la cantidad correcta en efectivo.

**Responder**

Una vez tengan su respuesta, en el archivo ejercicio3.py, cambien las variables **_ENV_1 a ENV_10_** con la cantidad de billetes que debe tener 
cada sobre. Tomen en cuenta que la suma de todos los billetes debe ser igual a $1,000

Verifiquen su trabajo ejecutando:

```shell
~ $ make check-ej3
python check.py 3
Calificando Ejercicio: 3
....................
Nota: 40/40

```

Una vez mas, deben subir el ejercicio terminado a GitHub.

```shell
~ $ git add ejercicio3.py
~ $ git commit -m "Ejericio 3 terminado"
~ $ git push origin master
```

***

#### Ejercicio 4: Pearls Before Swine

Esta es una versión de un juego bien cool que tiene una solución basada en number representation. Jueguen en el siguiente [link](/assets/games/
pearls3b.swf). Primero jueguen un par de veces y vean si pueden ganar algunos rounds.

![figura3](/assets/img/labs/lab1_fig3.png)

Después de haberlo intentado muchas veces, échenle un vistazo a este [articulo](http://en.wikipedia.org/wiki/Nim) de Wikipedia. Con este nuevo 
conocimiento a la mano, ahora ustedes deben de ser capaces de vencer a Juan siempre. Pero siempre va a tomar un poco de practica. Sigan intentado 
hasta que puedan ganar seguidamente. 

Tomen un screen shot de su mejor partida y guardenla en su directorio con el nombre _**ejercicio4.png**_

Una vez tengan el screen shot en el directorio, pueden verificar la nota del ejercicio ejecutando:

```shell
~ $ make check-ej4
python check.py 4
Calificando Ejercicio: 4
....................
Nota: 10/10
```

o bien, la nota del laboratorio:

```shell
~ $ make check
python check.py
Calificando Todo:

Calificando Ejercicio: 1
....................
Nota: 40/40

Calificando Ejercicio: 2
....................
Nota: 10/10

Calificando Ejercicio: 3
....................
Nota: 40/40

Calificando Ejercicio: 4
....................
Nota: 10/10

TOTAL: 100/100
```

Recuerden hacer commit al terminar, y subir su respuesta final a GitHub:

```shell
~ $ git add *
~ $ git commit -m "Laboratorio 1 terminado"
~ $ git push origin master
```
Finalmente, suban el link del repositorio al **_GES_**, esto tambien es necesario que les pongamos nota. Tomen en cuenta que <b>deben subir el repositorio a GitHub y el link al GES</b>,
esto no es opcional, es un requerimiento para que pongamos nota.