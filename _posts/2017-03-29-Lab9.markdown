---
layout: post
title:  "Laboratorio 9"
date:   2017-03-31
category: lab
description: >
    En este laboratorio ustedes van a seguir trabajando en su proyecto; implementaran el Program Counter, la memoria de Instrucciones y 
    parte de la logica de control.
---

#### Setup

Como siempre, hagan click en este [link](https://classroom.github.com/assignment-invitations/b51b4209d41aa4967c5f3c6d27df51a0) para poder clonar los archivos necesarios para su laboratorio. Recuerden que tienen que subir este link de una vez a su GES, **si ustedes no suben el link del laboratorio van a tener un 0 como nota, sin posibilidad de cambiar ese resultado.**

***

#### Ejercicio 1: Memory Manager

El Memory Manager es el encargado de guardar las instrucciones que se irán ejecutando en cada ciclo del reloj. El componente principal del Memory
Manager, como se lo pueden imaginar, es la memoria RAM. En el archivo base tienen la memoria RAM que utilizaremos para las instrucciones, es una memoria 
de 24 bits de selección, cada uno conteniendo una palabra de 32 bits (lo que significa que la unidad mínima direccionable serán 4 bytes). Tomen en cuenta
que el encargado de llevar el control de la siguiente instrucción a ejecutar será el Program Counter, y el encargado de decodificar parte de la instrucción
será el InstructionDecoderPt1, así que el Memory Manager, por ahora, no tendrá mayor dificultad que conectarle inputs y outputs.

Nota: Jueguen con la RAM, vean como funciona y pregúntense por qué hay una constante "1" conectada a la RAM... 

Una vez terminado el ejercicio, hagan commit de su trabajo.

***

#### Ejercicio 2: Program Counter

El Program Counter (desde ahora PC), es un registro con capacidad de autoincrementarse que mantiene la dirección de la siguiente instrucción a ejecutar.
Además de autoincrementarse, el PC también debe tener la capacidad de cambiar a otro valor totalmente diferente (que es lo que sucede cuando ocurre un 
branch). El PC que nosotros usaremos para este caso es únicamente de 24 bits, porque la memoria RAM de Logisim llega únicamente hasta 24 bits.

Entonces en este punto de la vida ustedes se están preguntando ¿Qué hacemos con las direcciones de memoria de 64 bits? Y si se imaginaron que hay que 
cortarlas y usar únicamente los bits menos significativos, tienen toda la razón, justo eso hay que hacer. 

Antes de proseguir, no olviden subir su trabajo a GitHub.

***

#### Ejercicio 3: InstructionDecoderPt1

Seguramente la parte más importante del laboratorio; deben leer las indicaciones del proyecto e implementar un circuito que, dada la instrucción que reciben de
input, encienda uno (y únicamente uno) de los cuatro bits de salida, dependiendo de si es tipo R, I, B o Load/Store. Vean la codificación, los bits
que hay en común entre una y otra instrucción, que diferencia las tipo R de las demás, para tratar de simplificar su circuito. Y claro, siempre tienen la
posibilidad de hacer un mapa de Carnaugh.

Cuando crean que tienen todo listo funcionando recuerden subirlo a GitHub.